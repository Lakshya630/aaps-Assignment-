Initialize an empty list subsets to store all subsets.

Iterate over the range 0 to 2^n - 1:

For each i, find the subset corresponding to the binary representation of i.

For each bit in i, if the bit is 1, include the element at the corresponding position in the subset.

Return the subsets list.

Java Program:
java
Copy
Edit
import java.util.ArrayList;
import java.util.List;

public class Subsets {

    // Function to generate all subsets of a given array
    public static List<List<Integer>> generateSubsets(int[] nums) {
        List<List<Integer>> subsets = new ArrayList<>();
        int n = nums.length;

        // Total number of subsets is 2^n
        int totalSubsets = 1 << n;

        // Generate all subsets
        for (int i = 0; i < totalSubsets; i++) {
            List<Integer> subset = new ArrayList<>();
            
            // Check each bit of i and include the corresponding element
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    subset.add(nums[j]);
                }
            }
            
            subsets.add(subset);
        }

        return subsets;
    }

    public static void main(String[] args) {
        // Example array
        int[] nums = {1, 2, 3};

        // Generate and print all subsets
        List<List<Integer>> result = generateSubsets(nums);
        
        System.out.println("All subsets:");
        for (List<Integer> subset : result) {
            System.out.println(subset);
        }
    }
}
Explanation of the Example:
Given the array [1, 2, 3], the subsets can be generated as follows:

Step 1: Total subsets = 
2
3
=
8
2 
3
 =8.

Step 2: Iterate over all numbers from 0 to 7 and convert each number to a binary representation:

For i = 0 (binary 000), the subset is [] (empty subset).

For i = 1 (binary 001), the subset is [3].

For i = 2 (binary 010), the subset is [2].

For i = 3 (binary 011), the subset is [2, 3].

For i = 4 (binary 100), the subset is [1].

For i = 5 (binary 101), the subset is [1, 3].

For i = 6 (binary 110), the subset is [1, 2].

For i = 7 (binary 111), the subset is [1, 2, 3].

The subsets generated are: [], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3].

⏱️ Time and Space Complexity:
Time Complexity:

O(n * 2^n), where n is the length of the array. We generate 
2
𝑛
2 
n
  subsets, and for each subset, we potentially examine all n elements to check which elements to include in the subset.

Space Complexity:

O(n * 2^n), because we store all 
2
𝑛
2 
n
  subsets, and each subset can have up to n elements.

