Initialize two variables start and end to store the starting and ending indices of the longest palindrome.

Loop through each character in the string:

For each character, expand around it to find the longest odd and even-length palindromes.

Update start and end if a longer palindrome is found.

Return the substring from start to end as the longest palindromic substring.

Java Program:
java
Copy
Edit
public class LongestPalindromicSubstring {

    // Function to find the longest palindromic substring
    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) {
            return "";
        }

        int start = 0, end = 0;

        // Function to expand around the center
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i); // Odd length palindrome
            int len2 = expandAroundCenter(s, i, i + 1); // Even length palindrome
            int len = Math.max(len1, len2);

            // If we found a longer palindrome, update the start and end indices
            if (len > (end - start)) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }

        // Return the longest palindromic substring
        return s.substring(start, end + 1);
    }

    // Helper function to expand around the center
    private static int expandAroundCenter(String s, int left, int right) {
        int L = left, R = right;
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        return R - L - 1;
    }

    public static void main(String[] args) {
        String s = "babad";
        String result = longestPalindrome(s);
        System.out.println("Longest palindromic substring: " + result);
    }
}
Explanation:
Main Function (longestPalindrome):

We initialize two variables start and end to track the starting and ending indices of the longest palindromic substring found so far.

For each character in the string, we check both odd and even-length palindromes by expanding around the center.

If a palindrome with a greater length is found, we update start and end.

Helper Function (expandAroundCenter):

This function expands around a given center (either a single character or two adjacent characters) as long as the characters at the expanding boundaries are equal.

It returns the length of the longest palindrome centered at that point.

Example:
For the input string s = "babad":

Step-by-step:

For the first character 'b', we expand around both odd and even centers. The odd-length palindrome found is "b" and the even-length palindrome is also "b". No update to start and end.

At index 1, the odd-length palindrome is "aba" and the even-length palindrome is "bb". The longest palindrome is "aba".

At index 2, we find the palindrome "bab" (odd-length).

At index 3, no longer palindrome is found.

At index 4, no longer palindrome is found.

Thus, the longest palindrome substring is "bab".

Output: "bab"

Time and Space Complexity:
Time Complexity: O(n^2). We expand around each character, and in the worst case, we might expand up to the length of the string for each character.

Space Complexity: O(1). We are only using a few variables to track the start and end indices of the longest palindrome. No extra space is required for the input string.
