Find the longest non-increasing suffix:

Start from the right end and find the first number that is smaller than the number next to it. This is the pivot element.

Find the smallest number greater than the pivot in the suffix:

From the suffix (to the right of the pivot), find the smallest number greater than the pivot.

Swap the pivot and the smallest greater number.

Reverse the suffix:

To ensure the permutation is the next lexicographically greater one, reverse the suffix after the pivot.

If no pivot is found (i.e., the entire array is in non-increasing order), simply reverse the entire array to get the smallest permutation.

🧑‍💻 Java Program
java
Copy
Edit
import java.util.Arrays;

public class NextPermutation {

    public static void nextPermutation(int[] nums) {
        int n = nums.length;
        
        // Step 1: Find the pivot
        int i = n - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }

        if (i >= 0) {
            // Step 2: Find the smallest number greater than nums[i] in the suffix
            int j = n - 1;
            while (nums[j] <= nums[i]) {
                j--;
            }

            // Step 3: Swap nums[i] and nums[j]
            swap(nums, i, j);
        }

        // Step 4: Reverse the suffix starting at i + 1
        reverse(nums, i + 1, n - 1);
    }

    // Helper function to swap two elements
    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    // Helper function to reverse a portion of the array
    private static void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        nextPermutation(nums);
        System.out.println("Next permutation: " + Arrays.toString(nums));
    }
}
🔍 Example
Given the array:

java
Copy
Edit
nums = {1, 2, 3}
Steps:
Find the pivot (the first number that is smaller than the number after it):

i = 1, because nums[1] = 2 and nums[2] = 3 (2 < 3).

Find the smallest number greater than nums[1] (2) in the suffix:

j = 2, because nums[2] = 3.

Swap nums[1] and nums[2], resulting in [1, 3, 2].

Reverse the suffix starting at i + 1:

The suffix is [2], which is already sorted.

Output:

less
Copy
Edit
Next permutation: [1, 3, 2]
If the input was:
java
Copy
Edit
nums = {3, 2, 1}
The entire array is in non-increasing order, so there is no next permutation.

Reverse the array to get the smallest permutation: [1, 2, 3].

Output:

less
Copy
Edit
Next permutation: [1, 2, 3]
⏱️ Time and Space Complexity
Time Complexity: O(n)

We perform linear scans of the array to find the pivot and to find the smallest greater number in the suffix, both taking O(n) time. Reversing the suffix also takes O(n) time, so the overall time complexity is O(n).

Space Complexity: O(1)

We are only using a constant amount of extra space (for variables and swaps), so the space complexity is O(1).
