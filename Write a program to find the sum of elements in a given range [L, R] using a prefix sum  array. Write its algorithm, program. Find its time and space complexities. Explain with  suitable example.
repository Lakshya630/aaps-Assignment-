1.Input the array of size n.
2.Create a prefix sum array of the same size.
3.Calculate prefix sums:
  prefix[0] = arr[0]
  For each index i from 1 to n-1:
  prefix[i] = prefix[i-1] + arr[i]
4.To find sum in range [L, R]:
  If L == 0: return prefix[R]
  Else: return prefix[R] - prefix[L-1]

code:
public class PrefixSumRange {

    // Function to compute prefix sum array
    public static int[] computePrefixSum(int[] arr) {
        int n = arr.length;
        int[] prefix = new int[n];
        prefix[0] = arr[0];

        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + arr[i];
        }

        return prefix;
    }

    // Function to get sum of range [L, R]
    public static int rangeSum(int[] prefix, int L, int R) {
        if (L == 0) {
            return prefix[R];
        } else {
            return prefix[R] - prefix[L - 1];
        }
    }

    // Main method to test the program
    public static void main(String[] args) {
        int[] arr = {2, 4, 1, 3, 5};
        int L = 1, R = 3;

        int[] prefix = computePrefixSum(arr);
        int sum = rangeSum(prefix, L, R);

        System.out.println("Sum of elements from index " + L + " to " + R + " is: " + sum);
    }
}

Time Complexity
Prefix Sum Construction: O(n)
Range Query: O(1)
Space Complexity
Extra space for prefix array: O(n)
