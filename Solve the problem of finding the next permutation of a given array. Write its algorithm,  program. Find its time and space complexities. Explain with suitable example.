Start from the right end of the array and find the first index i such that arr[i] < arr[i + 1].

If no such index exists, the array is sorted in descending order, so reverse the entire array.

Otherwise, find the smallest element arr[j] to the right of arr[i] that is greater than arr[i].

Swap arr[i] and arr[j].

Reverse the part of the array from index i + 1 to the end.

Java Program:
java
Copy
Edit
import java.util.Arrays;

public class NextPermutation {

    // Function to find the next permutation of the given array
    public static void nextPermutation(int[] nums) {
        int n = nums.length;
        
        // Step 1: Find the first decreasing element from the right
        int i = n - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        
        if (i >= 0) {
            // Step 2: Find the element just larger than nums[i] to swap with
            int j = n - 1;
            while (nums[j] <= nums[i]) {
                j--;
            }
            
            // Step 3: Swap the elements at indices i and j
            swap(nums, i, j);
        }
        
        // Step 4: Reverse the subarray from i + 1 to the end
        reverse(nums, i + 1, n - 1);
    }
    
    // Function to swap two elements in the array
    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    // Function to reverse the array from index start to end
    private static void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        nextPermutation(nums);
        System.out.println(Arrays.toString(nums));  // Output: [1, 3, 2]
    }
}
Explanation:
Finding the first decreasing element:

We start by scanning the array from the end towards the beginning to find the first element arr[i] that is smaller than its next element arr[i + 1]. This is the element that breaks the descending order, which will help us find the next permutation.

Finding the element to swap:

Once we have found the first decreasing element arr[i], we find the smallest element arr[j] to the right of arr[i] that is greater than arr[i]. This ensures that we swap with the smallest possible number greater than arr[i], maintaining the next smallest permutation.

Swapping the elements:

We swap arr[i] and arr[j].

Reversing the subarray:

Finally, we reverse the subarray from i + 1 to the end to make it the smallest possible lexicographical order.

Example:
Given the input array: [1, 2, 3]

Step 1: The first decreasing element is 1 at index 0 because 1 < 2.

Step 2: Find the element to the right of 1 that is larger than 1. The smallest such element is 2.

Step 3: Swap 1 and 2, so the array becomes [2, 1, 3].

Step 4: Reverse the subarray from index 1 to the end, which gives [2, 3, 1].

Output: [2, 3, 1]

Edge Case:
Given the input array: [3, 2, 1] (already in descending order):

Step 1: No decreasing element is found, so the array is already the largest possible permutation.

Step 2: We reverse the entire array to get the smallest permutation: [1, 2, 3].

Output: [1, 2, 3]

Time and Space Complexity:
Time Complexity: O(n). We perform a few linear scans (for finding i, finding j, and reversing a subarray), so the time complexity is linear with respect to the size of the array.

Space Complexity: O(1). We only use a few extra variables (i, j) for swapping and reversing, and we do not use any additional data structures that grow with the input size.
