Step 1: Create a hash map to count the frequency of each element in the array.

Step 2: Create a min-heap to store elements by their frequency.

Step 3: Iterate through the hash map, and for each element:

Add it to the heap.

If the size of the heap exceeds K, remove the root (the element with the smallest frequency).

Step 4: The heap will contain the top K frequent elements. Extract them and return.

Time and Space Complexity:
Time Complexity:

Building the frequency map: O(n), where n is the number of elements in the array.

Adding an element to the heap: O(log K) (since the heap can contain at most K elements).

For n elements, the total time complexity is O(n log K).

Space Complexity:

The space complexity is O(n) for storing the frequency map, and O(K) for storing the top K frequent elements in the heap.

Java Program:
java
Copy
Edit
import java.util.*;

public class TopKFrequentElements {

    // Function to find the top K frequent elements
    public static List<Integer> topKFrequent(int[] nums, int k) {
        // Step 1: Count the frequency of each element in the array
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Create a min-heap to store the top K frequent elements
        PriorityQueue<Map.Entry<Integer, Integer>> minHeap =
            new PriorityQueue<>((a, b) -> a.getValue() - b.getValue()); // Min heap based on frequency
        
        // Step 3: Add elements to the heap and maintain the heap size of K
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            minHeap.offer(entry);
            if (minHeap.size() > k) {
                minHeap.poll(); // Remove the element with the smallest frequency
            }
        }

        // Step 4: Extract the elements from the heap
        List<Integer> result = new ArrayList<>();
        while (!minHeap.isEmpty()) {
            result.add(minHeap.poll().getKey());
        }

        // The list is in reverse order, so reverse it
        Collections.reverse(result);
        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 1, 1, 2, 2, 3};
        int k = 2;
        
        List<Integer> result = topKFrequent(nums, k);
        
        // Print the result
        System.out.println("Top " + k + " frequent elements: " + result);
    }
}
Explanation:
Step 1: We first create a frequency map using a HashMap. For the array nums = {1, 1, 1, 2, 2, 3}, the frequency map will be:

Copy
Edit
{1=3, 2=2, 3=1}
Step 2: We use a min-heap (PriorityQueue) where the heap is ordered by the frequency of the elements. We use the frequency as the priority for sorting.

Step 3: For each entry in the frequency map, we add it to the heap. If the heap exceeds size k, we remove the root (the element with the smallest frequency).

Step 4: After processing all the elements, we extract the keys from the heap. Since the heap gives us elements in ascending order of frequency, we reverse the result list to get the elements in descending order of frequency.

Example:
For the input nums = {1, 1, 1, 2, 2, 3} and k = 2, the output will be:

css
Copy
Edit
Top 2 frequent elements: [1, 2]
Frequency map: {1=3, 2=2, 3=1}

After processing the heap, the top 2 frequent elements are [1, 2].

Time and Space Complexity:
Time Complexity:

Constructing the frequency map: O(n), where n is the number of elements in the array.

Adding to the heap: For each element, inserting into the heap takes O(log K). Since there are n elements, this step takes O(n log K).

Final time complexity: O(n log K).

Space Complexity:

O(n) for storing the frequency map.

O(K) for storing the top K frequent elements in the heap.

Total space complexity: O(n + K).
