The approach to solving this problem is as follows:

Two Arrays for Left and Right Maximums:

Left Maximum Array: Create an array leftMax[] where each element stores the maximum height of the bar from the left (up to that index).

Right Maximum Array: Create an array rightMax[] where each element stores the maximum height of the bar from the right (up to that index).

Water Calculation:

The amount of water trapped at each index is determined by the minimum of the leftMax[i] and rightMax[i], minus the height of the current bar height[i].

Water trapped at index i:
water[i] = min(leftMax[i], rightMax[i]) - height[i]

Sum all the trapped water for the result.

Edge Case: If the histogram has fewer than 3 bars, no water can be trapped.

üßë‚Äçüíª Java Program
java
Copy
Edit
public class TrappingRainWater {

    public static int trap(int[] height) {
        int n = height.length;
        if (n <= 2) {
            return 0; // No water can be trapped if there are less than 3 bars
        }

        int[] leftMax = new int[n];
        int[] rightMax = new int[n];

        // Fill leftMax array
        leftMax[0] = height[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], height[i]);
        }

        // Fill rightMax array
        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(rightMax[i + 1], height[i]);
        }

        // Calculate the total trapped water
        int water = 0;
        for (int i = 0; i < n; i++) {
            water += Math.min(leftMax[i], rightMax[i]) - height[i];
        }

        return water;
    }

    public static void main(String[] args) {
        int[] height = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
        int result = trap(height);
        System.out.println("Total water trapped: " + result);
    }
}
üîç Example
Given the height array:

ini
Copy
Edit
height = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1}
Steps:
Left Maximum Array:

leftMax[] = {0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3}

Right Maximum Array:

rightMax[] = {3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3}

Water Calculation:

For each index, calculate the water trapped:

At index 0: water[0] = min(0, 3) - 0 = 0

At index 1: water[1] = min(1, 3) - 1 = 0

At index 2: water[2] = min(1, 3) - 0 = 1

At index 3: water[3] = min(2, 3) - 2 = 0

At index 4: water[4] = min(2, 3) - 1 = 1

At index 5: water[5] = min(2, 3) - 0 = 2

At index 6: water[6] = min(2, 3) - 1 = 1

At index 7: water[7] = min(3, 3) - 3 = 0

At index 8: water[8] = min(3, 3) - 2 = 1

At index 9: water[9] = min(3, 2) - 1 = 1

At index 10: water[10] = min(3, 2) - 2 = 0

At index 11: water[11] = min(3, 3) - 1 = 2

The total trapped water is 0 + 0 + 1 + 0 + 1 + 2 + 1 + 0 + 1 + 1 + 0 + 2 = 6.

Output:

yaml
Copy
Edit
Total water trapped: 6
‚è±Ô∏è Time and Space Complexity
Time Complexity:

The time complexity is O(n) because we make 3 passes through the array:

One pass to compute the leftMax[] array.

One pass to compute the rightMax[] array.

One pass to calculate the trapped water.

Space Complexity:

The space complexity is O(n) because we are using two additional arrays (leftMax[] and rightMax[]) to store the maximum values for each index.

