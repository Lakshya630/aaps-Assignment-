The Boyer-Moore Voting Algorithm is an efficient way to find the majority element in an array. The idea behind this algorithm is based on a candidate element and vote counting.

Steps:
First Pass - Candidate Selection:

Initialize a variable candidate to store the possible majority element and a variable count to store the number of votes for the candidate.

Traverse through the array:

If count is 0, set candidate to the current element.

If the current element is equal to candidate, increment count.

If the current element is different, decrement count.

Second Pass - Validation:

After the first pass, the candidate might be the majority element, but we need to verify if it actually appears more than n/2 times.

Traverse the array again to count the occurrences of candidate.

If the count is greater than n/2, return candidate. Otherwise, return -1.

Time Complexity:
First pass: O(n) (We scan through the array once)

Second pass: O(n) (We count the occurrences of the candidate)

Total Time Complexity: O(n)

Space Complexity:
Space Complexity: O(1) (We only use a few variables to track the candidate and its count)

üßë‚Äçüíª Java Program
java
Copy
Edit
public class MajorityElement {

    // Function to find the majority element
    public static int majorityElement(int[] nums) {
        int candidate = -1;
        int count = 0;

        // First pass: Find the candidate
        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            count += (num == candidate) ? 1 : -1;
        }

        // Second pass: Validate the candidate
        count = 0;
        for (int num : nums) {
            if (num == candidate) {
                count++;
            }
        }

        // If the candidate occurs more than n/2 times, return it
        if (count > nums.length / 2) {
            return candidate;
        } else {
            return -1; // No majority element
        }
    }

    public static void main(String[] args) {
        int[] nums = {3, 2, 3};
        int result = majorityElement(nums);
        System.out.println("The majority element is: " + result);
    }
}
üîç Example
Input:
java
Copy
Edit
nums = {3, 2, 3}
Steps:
First Pass - Candidate Selection:

Start with candidate = -1 and count = 0.

For the first element (3), set candidate = 3 and count = 1.

For the second element (2), count = 0 (because 3 != 2), so set candidate = 2.

For the third element (3), count = 1 (because 2 != 3), set candidate = 3 again.

The first pass gives candidate = 3.

Second Pass - Validation:

Count the occurrences of candidate = 3:

The count is 2, and since the array length is 3, 2 > 3/2, so 3 is the majority element.

Output:

csharp
Copy
Edit
The majority element is: 3
Input:
java
Copy
Edit
nums = {1, 2, 3, 4}
In this case, no element appears more than n/2 = 2 times, so the result will be -1.

Output:

csharp
Copy
Edit
The majority element is: -1
‚è±Ô∏è Time and Space Complexity
Time Complexity: O(n)

The first pass takes O(n) time to find the candidate.

The second pass takes O(n) time to validate the candidate.

Space Complexity: O(1)

We only use a few variables (candidate and count) to keep track of the majority element, so the space complexity is constant.

