Calculate the sum of the first K elements – call it windowSum.

Initialize maxSum = windowSum.

Slide the window from left to right:

Subtract the element going out: arr[i - K]

Add the new element coming in: arr[i]

Update windowSum and compare with maxSum

Return maxSum

🧑‍💻 Java Program
java
Copy
Edit
public class MaxSubarraySum {

    public static int maxSumOfSubarraySizeK(int[] arr, int k) {
        int n = arr.length;
        if (n < k) {
            System.out.println("Invalid: Subarray size K is greater than array size.");
            return -1;
        }

        // Step 1: Calculate initial window sum
        int windowSum = 0;
        for (int i = 0; i < k; i++) {
            windowSum += arr[i];
        }

        int maxSum = windowSum;

        // Step 2: Slide the window
        for (int i = k; i < n; i++) {
            windowSum += arr[i] - arr[i - k];
            maxSum = Math.max(maxSum, windowSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] arr = {1, 4, 2, 10, 2, 3, 1, 0, 20};
        int k = 4;

        int maxSum = maxSumOfSubarraySizeK(arr, k);
        System.out.println("Maximum sum of a subarray of size " + k + " is: " + maxSum);
    }
}
🔍 Example
Given:

ini
Copy
Edit
arr = {1, 4, 2, 10, 2, 3, 1, 0, 20}, k = 4
First window (1,4,2,10): sum = 17

Next window (4,2,10,2): sum = 18

Next (2,10,2,3): sum = 17

Next (10,2,3,1): sum = 16

Next (2,3,1,0): sum = 6

Next (3,1,0,20): sum = 24 ✅

Output:

python
Copy
Edit
Maximum sum of a subarray of size 4 is: 24
⏱️ Time and Space Complexities
Time Complexity: O(n)
(We scan each element once)

Space Complexity: O(1)
(No extra array used; only variables)
