The idea is to perform binary search on the smaller array, which ensures that the time complexity remains logarithmic.

Ensure nums1 is the smaller array:

If nums1 is longer than nums2, swap them. This ensures that we always perform binary search on the smaller array.

Binary search on the smaller array:

Set left to 0 and right to the length of the smaller array.

Calculate a partition for the smaller array and derive the corresponding partition for the larger array.

Check the conditions for median:

The left half of the combined arrays should contain all elements smaller than or equal to the right half.

If the current partition is valid, calculate the median.

If not, adjust the binary search range and repeat.

Edge case handling:

Handle when one array is empty, in which case the median is directly calculated from the non-empty array.

üßë‚Äçüíª Java Program
java
Copy
Edit
public class MedianOfTwoSortedArrays {

    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Ensure nums1 is the smaller array
        if (nums1.length > nums2.length) {
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
        }

        int m = nums1.length;
        int n = nums2.length;
        int left = 0, right = m;

        while (left <= right) {
            int partition1 = (left + right) / 2;
            int partition2 = (m + n + 1) / 2 - partition1;

            // Handle edge cases by considering extreme elements
            int maxLeft1 = (partition1 == 0) ? Integer.MIN_VALUE : nums1[partition1 - 1];
            int minRight1 = (partition1 == m) ? Integer.MAX_VALUE : nums1[partition1];

            int maxLeft2 = (partition2 == 0) ? Integer.MIN_VALUE : nums2[partition2 - 1];
            int minRight2 = (partition2 == n) ? Integer.MAX_VALUE : nums2[partition2];

            // Check if partition is valid
            if (maxLeft1 <= minRight2 && maxLeft2 <= minRight1) {
                // If the combined length is odd, return the max of the left half
                if ((m + n) % 2 == 1) {
                    return Math.max(maxLeft1, maxLeft2);
                } else {
                    // If even, return the average of the two middle elements
                    return (Math.max(maxLeft1, maxLeft2) + Math.min(minRight1, minRight2)) / 2.0;
                }
            } else if (maxLeft1 > minRight2) {
                right = partition1 - 1; // Move partition1 to the left
            } else {
                left = partition1 + 1; // Move partition1 to the right
            }
        }

        throw new IllegalArgumentException("Input arrays are not sorted.");
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 3};
        int[] nums2 = {2};
        double result = findMedianSortedArrays(nums1, nums2);
        System.out.println("Median: " + result);
    }
}
üîç Example
Input:
java
Copy
Edit
nums1 = {1, 3}, nums2 = {2}
Steps:
Ensure nums1 is smaller:

nums1 has length 2 and nums2 has length 1, so no swap needed.

Binary search on nums1:

Initially, left = 0 and right = 2.

Partition 1 at index 0 (nums1[0] = 1).

Partition 2 at index 1 (nums2[0] = 2).

Check partitions:

Left side: maxLeft1 = 1, maxLeft2 = 2

Right side: minRight1 = 3, minRight2 = Integer.MAX_VALUE

The condition is valid (maxLeft1 <= minRight2 and maxLeft2 <= minRight1).

Calculate the median:

The combined length is odd (m + n = 3).

So, the median is Math.max(maxLeft1, maxLeft2) = Math.max(1, 2) = 2.

Output:

makefile
Copy
Edit
Median: 2.0
‚è±Ô∏è Time and Space Complexity
Time Complexity: O(log(min(m, n)))

We perform a binary search on the smaller array, and each iteration takes constant time for checking the conditions. Therefore, the time complexity is logarithmic in terms of the size of the smaller array.

Space Complexity: O(1)

We only use a few variables for the binary search, so the space complexity is constant.
