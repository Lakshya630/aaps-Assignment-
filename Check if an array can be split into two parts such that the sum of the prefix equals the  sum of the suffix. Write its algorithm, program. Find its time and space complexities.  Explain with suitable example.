Calculate the total sum of the array.

Initialize leftSum = 0.

Loop through the array:

Add current element to leftSum.

Calculate rightSum = totalSum - leftSum

If leftSum == rightSum, return true (such a split is possible).

If loop ends, return false.

üßë‚Äçüíª Java Program
java
Copy
Edit
public class EqualPrefixSuffixSplit {

    public static boolean canSplit(int[] arr) {
        int totalSum = 0;
        for (int num : arr) {
            totalSum += num;
        }

        int leftSum = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            leftSum += arr[i];
            int rightSum = totalSum - leftSum;

            if (leftSum == rightSum) {
                return true;
            }
        }

        return false;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 3};

        if (canSplit(arr)) {
            System.out.println("The array can be split into two parts with equal sum.");
        } else {
            System.out.println("The array cannot be split into two parts with equal sum.");
        }
    }
}
üîç Example
Given:

ini
Copy
Edit
arr = {1, 2, 3, 3}
Total sum = 9

Check:

i = 0 ‚Üí leftSum = 1, rightSum = 8 ‚ùå

i = 1 ‚Üí leftSum = 3, rightSum = 6 ‚ùå

i = 2 ‚Üí leftSum = 6, rightSum = 3 ‚ùå

i = 3 ‚Üí Loop ends

üü• Output:

sql
Copy
Edit
The array cannot be split into two parts with equal sum.
Now try with:

ini
Copy
Edit
arr = {1, 2, 3, 4, 6}
Total = 16
At i = 3 ‚Üí leftSum = 10, rightSum = 6 ‚úÖ
So it can be split.

‚è±Ô∏è Time and Space Complexities
Time Complexity: O(n)
(One loop to calculate total sum, one to check for split)

Space Complexity: O(1)
(Only variables used, no extra space)
