Initialize an empty stack.

Initialize a result array with all values as -1.

Loop through the array from right to left:

If the stack is empty, set the next greater element as -1.

Otherwise, pop elements from the stack while the current element is greater than or equal to the stack's top.

The next greater element is the element on top of the stack, if any.

Push the current element onto the stack.

After processing all elements, return the result array.

üßë‚Äçüíª Java Program
java
Copy
Edit
import java.util.Stack;

public class NextGreaterElement {

    // Function to find the next greater element for each element in the array
    public static int[] nextGreaterElement(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();

        // Traverse the array from right to left
        for (int i = n - 1; i >= 0; i--) {
            // Pop elements from the stack while they are less than or equal to the current element
            while (!stack.isEmpty() && stack.peek() <= nums[i]) {
                stack.pop();
            }

            // If the stack is not empty, the next greater element is on top of the stack
            if (!stack.isEmpty()) {
                result[i] = stack.peek();
            } else {
                result[i] = -1;
            }

            // Push the current element onto the stack
            stack.push(nums[i]);
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {4, 5, 2, 10, 8};  // Example array
        int[] result = nextGreaterElement(nums);

        System.out.println("Next Greater Element for each element in the array:");
        for (int num : result) {
            System.out.print(num + " ");
        }
    }
}
üîç Example Walkthrough:
Consider the array: [4, 5, 2, 10, 8].

Start from the right:

For 8, there is no element to the right, so next greater element is -1.

For 10, there is no element to the right, so next greater element is -1.

For 2, the next greater element is 10 (from the stack).

For 5, the next greater element is 10 (from the stack).

For 4, the next greater element is 5 (from the stack).

Result Array: [5, 10, 10, -1, -1].

Output:

mathematica
Copy
Edit
Next Greater Element for each element in the array:
5 10 10 -1 -1
‚è±Ô∏è Time and Space Complexity:
Time Complexity:

We traverse the array once, and for each element, we may push and pop it from the stack at most once. Thus, the time complexity is O(n), where n is the number of elements in the array.

Space Complexity:

We use a stack to store the elements temporarily, and in the worst case, the stack will store all n elements. Thus, the space complexity is O(n).
