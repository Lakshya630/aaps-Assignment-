Initialize max_current and max_global to the first element of the array.

Loop through the array from the second element to the end:

Update max_current as max(max_current + arr[i], arr[i]).

Update max_global as max(max_global, max_current).

Return max_global as the result.

Java Program:
java
Copy
Edit
public class KadanesAlgorithm {

    // Function to find the maximum subarray sum using Kadane's algorithm
    public static int maxSubArraySum(int[] arr) {
        // Step 1: Initialize variables
        int max_current = arr[0];  // Max sum of subarray ending at current index
        int max_global = arr[0];   // Max sum found so far

        // Step 2: Loop through the array starting from the second element
        for (int i = 1; i < arr.length; i++) {
            // Step 3: Update max_current to include the current element
            max_current = Math.max(arr[i], max_current + arr[i]);

            // Step 4: Update max_global if necessary
            if (max_current > max_global) {
                max_global = max_current;
            }
        }

        // Step 5: Return the result
        return max_global;
    }

    public static void main(String[] args) {
        // Example array
        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};

        // Find the maximum subarray sum
        int result = maxSubArraySum(arr);

        // Print the result
        System.out.println("Maximum subarray sum: " + result);
    }
}
Explanation of the Example:
Given the array arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4], we need to find the maximum sum of a contiguous subarray.

Initialize max_current = -2 and max_global = -2.

Iterate through the array:

At index 1, the element is 1. max_current = max(1, -2 + 1) = 1, so max_global = max(-2, 1) = 1.

At index 2, the element is -3. max_current = max(-3, 1 + (-3)) = -2, so max_global = max(1, -2) = 1.

At index 3, the element is 4. max_current = max(4, -2 + 4) = 4, so max_global = max(1, 4) = 4.

At index 4, the element is -1. max_current = max(-1, 4 + (-1)) = 3, so max_global = max(4, 3) = 4.

At index 5, the element is 2. max_current = max(2, 3 + 2) = 5, so max_global = max(4, 5) = 5.

At index 6, the element is 1. max_current = max(1, 5 + 1) = 6, so max_global = max(5, 6) = 6.

At index 7, the element is -5. max_current = max(-5, 6 + (-5)) = 1, so max_global = max(6, 1) = 6.

At index 8, the element is 4. max_current = max(4, 1 + 4) = 5, so max_global = max(6, 5) = 6.

After iterating through the array, the maximum subarray sum is 6.

Time and Space Complexity:
Time Complexity:

O(n), where n is the number of elements in the array. We iterate through the array once, updating max_current and max_global in constant time at each step.

Space Complexity:

O(1), because we are using only a few extra variables (max_current and max_global) and not using any additional data structures that depend on the size of the input.
