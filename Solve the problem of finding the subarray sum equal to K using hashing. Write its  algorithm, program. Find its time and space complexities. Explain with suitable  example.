Initialize an empty hash map sum_map with {0: 1}.

Initialize cumulative_sum = 0.

For each element num in the array:

Update cumulative_sum = cumulative_sum + num.

Check if cumulative_sum - K exists in sum_map:

If it does, return true (a subarray with sum K exists).

Add cumulative_sum to the hash map sum_map.

If no subarray is found, return false.

Java Program:
java
Copy
Edit
import java.util.HashMap;

public class SubarraySumEqualK {

    // Function to check if there is a subarray with sum equal to K
    public static boolean subarraySumEqualK(int[] nums, int K) {
        // HashMap to store the cumulative sum and its frequency
        HashMap<Integer, Integer> sumMap = new HashMap<>();
        
        // Initial sum map with cumulative sum 0 having frequency 1
        sumMap.put(0, 1);
        
        int cumulativeSum = 0;

        // Traverse the array
        for (int num : nums) {
            cumulativeSum += num;  // Update the cumulative sum

            // Check if cumulativeSum - K exists in the map
            if (sumMap.containsKey(cumulativeSum - K)) {
                return true;  // Subarray with sum K exists
            }

            // Add the cumulative sum to the map
            sumMap.put(cumulativeSum, sumMap.getOrDefault(cumulativeSum, 0) + 1);
        }

        // No subarray found with sum K
        return false;
    }

    public static void main(String[] args) {
        // Example array and K
        int[] nums = {1, 2, 3, 7, 5};
        int K = 12;

        // Check if there's a subarray with sum equal to K
        boolean result = subarraySumEqualK(nums, K);
        System.out.println("Subarray sum equal to " + K + ": " + result);
    }
}
Explanation of the Example:
Given the array [1, 2, 3, 7, 5] and K = 12:

Cumulative sum starts at 0.

First element (1):

cumulative_sum = 1.

1 - 12 = -11 is not in the map, so we add 1 to the map.

Map: {0: 1, 1: 1}

Second element (2):

cumulative_sum = 3.

3 - 12 = -9 is not in the map, so we add 3 to the map.

Map: {0: 1, 1: 1, 3: 1}

Third element (3):

cumulative_sum = 6.

6 - 12 = -6 is not in the map, so we add 6 to the map.

Map: {0: 1, 1: 1, 3: 1, 6: 1}

Fourth element (7):

cumulative_sum = 13.

13 - 12 = 1 is in the map! We found that a subarray starting from the index after the index of the element 1 and ending at the current index gives us a sum of 12.

Return true.

Thus, the subarray [3, 7, 5] sums up to 12, and the program returns true.

⏱️ Time and Space Complexity:
Time Complexity:

The time complexity is O(n), where n is the number of elements in the array. We only traverse the array once, and each lookup in the hash map takes constant time on average.

Space Complexity:

The space complexity is O(n), where n is the number of elements in the array. In the worst case, the hash map will store all cumulative sums.
